{
  "name": "YoutubeLink_Input_To_Video",
  "nodes": [
    {
      "parameters": {
        "content": "## üöÄ YouTube to LinkedIn Automation Pipeline\n\n**Workflow Purpose:** Converts YouTube videos into engaging LinkedIn posts with human-in-the-loop review\n\n### üîÑ Process Flow:\n1. **Data Intake** ‚Üí Scheduled check for ready videos in Google Sheets\n2. **Transcript Processing** ‚Üí Extract/store video transcripts\n3. **AI Content Generation** ‚Üí Create LinkedIn-optimized posts\n4. **Human Review** ‚Üí Slack approval workflow with feedback loop\n5. **Auto Publishing** ‚Üí Post to LinkedIn with video preview\n6. **Status Tracking** ‚Üí Update completion status in sheets\n\nThis workflow covers nodes: Schedule Trigger ‚Üí Google Sheets ‚Üí Transcript Processing ‚Üí AI Generation ‚Üí Human Review ‚Üí LinkedIn Publishing",
        "height": 380,
        "width": 660,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1180,
        0
      ],
      "id": "6477203c-dd21-408c-b077-9f9b9407ea65",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## üë®‚Äçüíª Creator Information\n\n**Created by:** Lakshit Ukani  \nüîó **LinkedIn:** [Connect with me](https://www.linkedin.com/in/lakshit-ukani/)\nüîó **Youtube:** [Subscribe to my Channel](https://www.youtube.com/@lakshit-ukani?sub_confirmation=1)\n\n### ü§ù Community & Support\nüí¨ **Join Community:** [Skool Community Link](https://www.skool.com/ai-automation-club-7843)   \nüìö **Documentation:** [Full Guide & FAQ](https://developers.facebook.com/docs/instagram-platform/instagram-graph-api/reference/ig-user/media#creating)  \n\n### üìû Need Help?\n- **Quick Questions:** Comment on the YouTube video\n- **Workflow Issues:** Post in our community  \n- **Business Inquiries:** Connect via LinkedIn",
        "height": 380,
        "width": 460,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "b8c5168e-8eb4-4c8c-adf7-356c13cc7987",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "url": " https://notegpt.io/api/v2/video-transcript",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpCustomAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "platform",
              "value": "youtube"
            },
            {
              "name": "video_id",
              "value": "={{ $('üÜî Get Video ID').item.json.video_id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        980,
        1080
      ],
      "id": "42e0bfb0-8adb-4e5f-880c-60cc52381bb7",
      "name": "üé¨ Get YouTube Transcript ",
      "credentials": {
        "httpCustomAuth": {
          "id": "b1xFRJvfFleHqrSI",
          "name": "Custom Auth account"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1tkjOAG2ZeLnSyN-74Z5BRqLcjdmi_3wp515wT1kw6JI",
          "mode": "list",
          "cachedResultName": "YoutubeLink_Input_To_Post",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1tkjOAG2ZeLnSyN-74Z5BRqLcjdmi_3wp515wT1kw6JI/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1QwZDdM51H8_41fqz_xsvt5xrdRAu6rLslYjCslzo9Ag/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Transcript": "={{ $json.data.transcripts.en_auto.custom.reduce((acc,ele)=>acc+ele.text,'') }}",
            "Youtube Video Link": "={{ $('Webhook').item.json.query.youtube }}",
            "Video Thumbnail": "={{ $('üì∫ Get Title & Thumbnail').item.json.snippet.thumbnails.high.url }}",
            "Video Title ": "={{ $('üì∫ Get Title & Thumbnail').item.json.snippet.title }}"
          },
          "matchingColumns": [
            "Youtube Video Link"
          ],
          "schema": [
            {
              "id": "Youtube Video Link",
              "displayName": "Youtube Video Link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Video Title ",
              "displayName": "Video Title ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Video Thumbnail",
              "displayName": "Video Thumbnail",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Transcript",
              "displayName": "Transcript",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Post Made?",
              "displayName": "Post Made?",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Post",
              "displayName": "Post",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        1340,
        1080
      ],
      "id": "75d9a459-fd68-4d5e-b0ff-b3a8639072f3",
      "name": "üíæ Store Transcript",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "Y5KMP9pwBxIwprBl",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Write a LinkedIn post using the info below:\n{{ $('Webhook').item.json.query.audience }}\n\nHere is Youtube Video Transcript:\n{{ $json.Transcript }}\n\n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are an expert LinkedIn post writer.\nWrite engaging, mobile-optimized LinkedIn posts in a conversational and casual tone.\nFollow the format of viral posts:\n\nStart with a 3-line hook that grabs attention and encourages readers to click ‚Äúsee more‚Äù\n\nThen write a short, punchy story that delivers value and keeps readers engaged\n\nEnd with a clear CTA (question, prompt, or suggestion to interact)\n\nüîÅ Formatting Rules:\n\n- No bulky paragraphs\n\n- No line should be longer than a tweet\n\n- Break ideas into small, scannable lines\n\n- Use emojis to add personality\n\n- Include light humor or relatable analogies if suitable\n\n- Always include 3‚Äì4 relevant hashtags at the end\n\nYour tone should feel authentic and human, like talking to a friend who‚Äôs curious about business and tech."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1640,
        1080
      ],
      "id": "bb5bc4d2-5be7-4369-a123-c721504ff722",
      "name": "ü§ñ AI LinkedIn Post Generator"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1760,
        1660
      ],
      "id": "e8860673-59ba-4ed4-980f-923f27a24791",
      "name": "üéØ OpenAI Chat Model ",
      "credentials": {
        "openAiApi": {
          "id": "owpJObaOf6QaauYf",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $execution.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1900,
        1660
      ],
      "id": "cf0a7ede-0376-4def-8da0-63e0fa09f72b",
      "name": "üß† Simple Memory"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"action\": {\n        \"type\": \"string\"\n      },\n      \"text\": {\n        \"type\": \"string\"\n      }\n    },\n    \"required\": [\"action\", \"text\"]\n  }\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        2040,
        1660
      ],
      "id": "04360b46-2609-4f21-bea8-1360275505d8",
      "name": "üìä Structured Output Parser"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "32a280f0-9f53-4014-90b9-b07b8e007f46",
              "name": "post",
              "value": "={{ $json.output[0].text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2100,
        1080
      ],
      "id": "a8b19e9d-e275-49e8-9446-3deea2b03fd3",
      "name": "‚úèÔ∏è Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "const post = $('‚úèÔ∏è Edit Fields').first().json.post\n  .replace(/\\n/g, \"\\\\n\")\n  .replace(/\"/g, \"'\");\n\nreturn [\n  { json: { post } }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2400,
        1080
      ],
      "id": "5f3ed48a-aed6-46c2-b942-1ddaaceaebc2",
      "name": "üîó Replace Line Breaks"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node - Extract Video ID from YouTube URL\n// Input: YouTube URL\n// Output: Video ID\n\nconst youtubeUrl = $input.first().json.query.youtube\n\nif (!youtubeUrl) {\n  throw new Error('No YouTube URL provided');\n}\n\nfunction extractVideoId(url) {\n  const patterns = [\n    /(?:youtube\\.com\\/watch\\?v=)([^&\\n?#]+)/, // youtube.com/watch?v=\n    /(?:youtu\\.be\\/)([^&\\n?#]+)/, // youtu.be/\n    /(?:youtube\\.com\\/embed\\/)([^&\\n?#]+)/, // youtube.com/embed/\n    /(?:youtube\\.com\\/v\\/)([^&\\n?#]+)/, // youtube.com/v/\n    /^([a-zA-Z0-9_-]{11})$/ // Direct video ID\n  ];\n  \n  for (const pattern of patterns) {\n    const match = url.match(pattern);\n    if (match && match[1]) {\n      return match[1];\n    }\n  }\n  \n  throw new Error('Could not extract video ID from URL');\n}\n\ntry {\n  const videoId = extractVideoId(youtubeUrl);\n  \n  return {\n    video_id: videoId,\n    original_url: youtubeUrl,\n    success: true\n  };\n  \n} catch (error) {\n  return {\n    error: error.message,\n    original_url: youtubeUrl,\n    success: false\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        380,
        1080
      ],
      "id": "0555f7ed-8beb-477c-a5fc-4969601640e2",
      "name": "üÜî Get Video ID"
    },
    {
      "parameters": {
        "resource": "video",
        "operation": "get",
        "videoId": "={{ $json.video_id }}",
        "options": {}
      },
      "type": "n8n-nodes-base.youTube",
      "typeVersion": 1,
      "position": [
        640,
        1080
      ],
      "id": "2ec51cdf-077a-430b-93b4-686f4c9d1b71",
      "name": "üì∫ Get Title & Thumbnail",
      "credentials": {
        "youTubeOAuth2Api": {
          "id": "hI2pBD8H7Zr4AW6S",
          "name": "YouTube account"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1tkjOAG2ZeLnSyN-74Z5BRqLcjdmi_3wp515wT1kw6JI",
          "mode": "list",
          "cachedResultName": "YoutubeLink_Input_To_Post",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1tkjOAG2ZeLnSyN-74Z5BRqLcjdmi_3wp515wT1kw6JI/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1tkjOAG2ZeLnSyN-74Z5BRqLcjdmi_3wp515wT1kw6JI/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Youtube Video Link": "={{ $('Webhook').item.json.query.youtube }}",
            "Post": "={{ $('üîó Replace Line Breaks').item.json.post }}",
            "Post Made?": "Yes"
          },
          "matchingColumns": [
            "Youtube Video Link"
          ],
          "schema": [
            {
              "id": "Youtube Video Link",
              "displayName": "Youtube Video Link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Video Title ",
              "displayName": "Video Title ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Video Thumbnail",
              "displayName": "Video Thumbnail",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Transcript",
              "displayName": "Transcript",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Post Made?",
              "displayName": "Post Made?",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Post",
              "displayName": "Post",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        2740,
        1080
      ],
      "id": "86e8a7d4-01a8-40db-b88e-c93a2158702f",
      "name": "‚úÖ Update Sheet Status",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "Y5KMP9pwBxIwprBl",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "content": "## üìä Smart Data Management\n",
        "height": 620,
        "width": 1160
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -320,
        920
      ],
      "id": "8b992ece-0ea1-4f59-9838-14a0e6e63284",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## ü§ñ AI-Powered Content Creation\n",
        "height": 620,
        "width": 640,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        880,
        920
      ],
      "id": "dee64bfb-f757-4840-b6f9-5dce09c53bb0",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## üí¨ Human-in-the-Loop Quality Control",
        "height": 620,
        "width": 700,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1560,
        920
      ],
      "id": "aef82777-1c00-4781-bc1b-51a78cb4e81f",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## üì§ LinkedIn Publishing Pipeline",
        "height": 620,
        "width": 680,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2320,
        920
      ],
      "id": "21a43da8-ed2f-49dc-9105-8ce1af3b28e1",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "## üìä Smart Data Management\n\n**Google Sheets Integration:**\n- Filters videos with \"ready\" status\n- Stores transcripts automatically\n- Tracks completion status\n- Maintains video metadata\n\n**Transcript Handling:**\n- Checks if transcript exists to avoid duplicate API calls\n- Uses Dumpling AI for accurate transcript extraction\n- Supports multiple languages with timestamp options\n\nCovers: Get Ready Videos ‚Üí Check Transcript ‚Üí Store Transcript ‚Üí Update Status",
        "height": 380,
        "width": 660
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -100,
        480
      ],
      "id": "f2a26a6d-7e2c-4294-94d0-8e4141e6dcbf",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "## ü§ñ AI-Powered Content Creation\n\n**LinkedIn Post Generation:**\n- Analyzes YouTube transcript content\n- Creates engaging, LinkedIn-optimized posts\n- Follows proven LinkedIn post structures\n- Maintains conversational, casual tone\n- Includes emojis and engagement hooks\n\n**AI Configuration:**\n- GPT-4.1-nano model for efficiency\n- Structured output parsing\n- Memory retention for context\n- Custom prompts with examples\n\nCovers: Set Transcript ‚Üí AI Agent ‚Üí OpenAI Model ‚Üí Memory ‚Üí Output Parser ‚Üí Edit Fields",
        "height": 420,
        "width": 600,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        880,
        460
      ],
      "id": "b4066452-c959-4164-b0e1-174272afc1a1",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "## üí¨ Human-in-the-Loop Quality Control\n\n**Slack Integration:**\n- Sends generated posts for human review\n- Custom form with Approve/Disapprove options\n- Feedback collection for improvements\n- Automated routing based on decision\n\n**Revision Process:**\n- AI revises content based on human feedback\n- Maintains original context and requirements\n- Iterative improvement capability\n- Quality assurance before publishing\n\nCovers: Slack Feedback ‚Üí Approval Check ‚Üí AI Reviser ‚Üí Content Refinement",
        "height": 360,
        "width": 600,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1600,
        480
      ],
      "id": "23b15f79-a256-4836-8ef0-0814a11f50ea",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "content": "## üì§ LinkedIn Publishing Pipeline\n\n**Content Preparation:**\n- Formats text for LinkedIn API compatibility\n- Extracts YouTube video metadata\n- Prepares rich media attachments\n- Gets user profile information\n\n**Auto Publishing:**\n- Posts to LinkedIn with video preview\n- Includes thumbnail and title\n- Updates tracking sheet automatically\n- Maintains publishing history\n\nCovers: Format Content ‚Üí Get Video Data ‚Üí LinkedIn API ‚Üí Update Status",
        "height": 360,
        "width": 620,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2360,
        480
      ],
      "id": "03fd8a95-60dc-478f-8787-692903c6575d",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "path": "2d7237c9-4d90-4f07-9e0f-97deed734049",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        40,
        1080
      ],
      "id": "9961ef3e-e127-4354-89f4-67e1b8cc903d",
      "name": "Webhook",
      "webhookId": "2d7237c9-4d90-4f07-9e0f-97deed734049"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"post\": \"{{ $json.Post }}\",\n  \"videoTitle\": \"{{ $('üì∫ Get Title & Thumbnail').item.json.snippet.title }}\",\n  \"videoThumbnail\": \"{{ $('üì∫ Get Title & Thumbnail').item.json.snippet.thumbnails.high.url }}\",\n  \"youtubeVideoLink\": \"{{ $json['Youtube Video Link'] }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        2460,
        1360
      ],
      "id": "c65be9a4-5842-4104-aefd-399fafdda253",
      "name": "Respond to Webhook"
    }
  ],
  "pinData": {},
  "connections": {
    "üé¨ Get YouTube Transcript ": {
      "main": [
        [
          {
            "node": "üíæ Store Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Store Transcript": {
      "main": [
        [
          {
            "node": "ü§ñ AI LinkedIn Post Generator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ü§ñ AI LinkedIn Post Generator": {
      "main": [
        [
          {
            "node": "‚úèÔ∏è Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üéØ OpenAI Chat Model ": {
      "ai_languageModel": [
        [
          {
            "node": "ü§ñ AI LinkedIn Post Generator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "üß† Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "ü§ñ AI LinkedIn Post Generator",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "üìä Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "ü§ñ AI LinkedIn Post Generator",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "‚úèÔ∏è Edit Fields": {
      "main": [
        [
          {
            "node": "üîó Replace Line Breaks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîó Replace Line Breaks": {
      "main": [
        [
          {
            "node": "‚úÖ Update Sheet Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üÜî Get Video ID": {
      "main": [
        [
          {
            "node": "üì∫ Get Title & Thumbnail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üì∫ Get Title & Thumbnail": {
      "main": [
        [
          {
            "node": "üé¨ Get YouTube Transcript ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "üÜî Get Video ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚úÖ Update Sheet Status": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook": {
      "main": [
        []
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3c01e2f5-161f-4c6f-afdf-5d032e9f7dcd",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "8814a3b7279efb10648e40ff54167e5710b79d084e7b34e9c8cc715baee20007"
  },
  "id": "swdvO6efMRLMJY5k",
  "tags": []
}