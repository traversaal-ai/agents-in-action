{
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -6600,
        -800
      ],
      "id": "422bdc98-ba09-4eaf-a085-f3b75028e219",
      "name": "When clicking 'Test workflow'"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=I'm working on an article with the following topic:\n\n<TopicTitle>\n{{ $('Come up with a topic1').item.json.output.title }}\n</TopicTitle>\n\n<TopicSummary>\n{{ $('Come up with a topic1').item.json.output.summary }}\n</TopicSummary>\n\nOriginal articles we used as an inspiration to come up with the topic\n\n<InpirationArticles>\n{{ $('Come up with a topic1').item.json.output.inspirations.map(item => `<Article>\\n${item.article}\\n</Article>`).join('\\n') }}\n</InpirationArticles>\n\n\nI did a research on google and came up with the results below. Each article is the markdown content of the HTML body.\n\n<OnlineResearch>\n{{  $json.research_results.map(item => `<Article>\\n${item.summary}\\n</Article>`).join('\\n') }}\n</OnlineResearch>\n\nWrite an detailed, long, engaging article on the subject, make sure to structure the article well, breaking the long text with lists, using bold, etc..\n\n",
        "hasOutputParser": true
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        -2160,
        -800
      ],
      "id": "5965754d-6a5c-4fdc-a138-b0cfe8d2a42d",
      "name": "Basic LLM Chain3"
    },
    {
      "parameters": {
        "content": "# 4. Write and post the article\n\n## After creating the article, you could other LLM chains or agents to add\n- SEO keywords\n- Add personality by rewriting the content in your style\n- Adding interlinks\n- Add sources",
        "height": 240,
        "width": 860
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2600,
        -1120
      ],
      "id": "a3e8d955-0d37-47aa-8014-ac48d6adc22f",
      "name": "Sticky Note5",
      "disabled": true
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n        \"title\": {\n            \"type\": \"string\",\n            \"description\": \"the title of the article\"\n        },\n        \"content\": {\n            \"type\": \"string\",\n            \"description\": \"the content of the article\"\n        }\n    },\n  \n    \"required\": [\n        \"title\",\n        \"content\"\n    ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -1920,
        -540
      ],
      "id": "e1022b63-228c-4724-9a08-5e0b35591201",
      "name": "Structured Output Parser3"
    },
    {
      "parameters": {
        "mode": "markdownToHtml",
        "markdown": "={{ $json.output.content }}",
        "destinationKey": "content_html",
        "options": {}
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        -1700,
        -800
      ],
      "id": "b3a0b6cf-3a51-4d0f-b8d7-367e1e8717ac",
      "name": "Markdown"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -3320,
        -60
      ],
      "id": "c24e0ce4-375d-48c2-b1a8-a586d04a1799",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "1NYcjHdurohDfhOk",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "bookmarks",
        "options": {
          "destinationFieldName": "bookmark"
        }
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -5780,
        -800
      ],
      "id": "5c648c5d-4b8c-4225-a69c-7795fdaf4743",
      "name": "Split Out"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "bookmarks",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -5360,
        -800
      ],
      "id": "db1515eb-e316-4688-949a-a5b430dc1b47",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n        \"ai_bookmarks\": {\n            \"type\": \"array\",\n            \"description\": \"user name\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"title\": {\n                        \"type\": \"string\"\n                    },\n                    \"link\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"required\": [\n                    \"title\",\n                    \"link\"\n                ]\n            }\n        }\n    },\n    \"required\": [\n        \"ai_bookmarks\"\n    ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -4600,
        -540
      ],
      "id": "34d512b0-0dfa-4cb1-a77b-612182a1e22d",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "url": "https://pinboard.in/popular/",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -6300,
        -800
      ],
      "id": "7cf0a476-628a-4888-b23b-2c4e2409fbef",
      "name": "Get popular bookmarks"
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "extractionValues": {
          "values": [
            {
              "key": "bookmarks",
              "cssSelector": ".display",
              "returnValue": "html",
              "returnArray": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        -6040,
        -800
      ],
      "id": "d46459ce-e2a8-4b17-bdf6-6781e8e18c3b",
      "name": "Extract bookmarks"
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "dataPropertyName": "bookmark",
        "extractionValues": {
          "values": [
            {
              "key": "link",
              "cssSelector": ".bookmark_title",
              "returnValue": "attribute",
              "attribute": "href"
            },
            {
              "key": "title",
              "cssSelector": ".bookmark_title"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        -5560,
        -800
      ],
      "id": "09175d10-2564-4b6b-bc43-fcaa4ec74c11",
      "name": "Extract bookmark"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Your job is to find an interesting topic to create an article about in the AI subject. The audience is \"AI enthusiasts\".\n\nYou are presented with popular articles (title and content). Please create an idea for an article that my AI enthusiastic audience will love. They are mostly knowledge workers, managers, leaders.\n\nThe thought process you should follow:\n1. Review all the articles from below\n2. Find the most interesting one for my audience. You can combine multiple articles if it makes sense.\n3. Return the articles used for inspiration by copying them over without changing the content.\n\n<Articles>\n{{ $('Aggregate3').item.json.articles.map(item => `<Article>\\n<Title>\\n${item.title}\\n</Title>\\n<Link>\\n${item.link}\\n<\\Link>\\n<Content>\\n${item.article}\\n</Content>\\n</Article>`).join('\\n') }}\n</Articles>",
        "hasOutputParser": true
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        -3040,
        -800
      ],
      "id": "7356923b-ed3c-415f-a44e-c5419171f7b4",
      "name": "Come up with a topic1",
      "retryOnFail": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<Instruction>\nYour job is to find AI and LLM related bookmarks that I can use as inspiration to write an article for my audience - mostly technical folks. Make sure you only pick bookmarks that are suitable for them.\n</Instruction>\n\n<ThoughtProcess>\nThe thought process you should follow:\n1. Review all the articles from below\n2. Find the ones that are AI and LLM related and relevant for my audience\n3. Return the title and the link of each AI related bookmarks\n\n4. Return top 3 ONLY\n\n5.Your audience is more technical\n</ThoughtProcess>\n\n<Bookmarks>\n{{ $json.bookmarks.map(bookmark => `<Bookmark>\\n<Title>${bookmark.title}</Title>\\n<Link>${bookmark.link}</Link>\\n</Bookmark>`).join('\\n') }}\n</Bookmarks>",
        "hasOutputParser": true
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        -4880,
        -800
      ],
      "id": "2e8ce4d6-7d55-4a33-8b29-fa4a395d95c1",
      "name": "Find trending AI bookmarks",
      "retryOnFail": true
    },
    {
      "parameters": {
        "fieldToSplitOut": "output.ai_bookmarks",
        "options": {
          "destinationFieldName": "bookmark"
        }
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -4100,
        -800
      ],
      "id": "36e4c66d-ec35-4194-b552-abbd04f8a1da",
      "name": "Split Out3"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "articles",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -3480,
        -800
      ],
      "id": "ac2b5237-55ab-4a77-a510-ff70d7ca79ed",
      "name": "Aggregate3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d7b5f308-b2e9-49f7-b9bd-4d339d96d0ee",
              "name": "article",
              "value": "={{ $json.data }}",
              "type": "string"
            },
            {
              "id": "2cf35a52-6c39-4109-a5b2-3ae3e45fdde3",
              "name": "title",
              "value": "={{ $('Split Out3').item.json.bookmark.title }}",
              "type": "string"
            },
            {
              "id": "41c86ac7-6301-47a8-881d-9402f76e1a06",
              "name": "link",
              "value": "={{ $('Split Out3').item.json.bookmark.link }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3680,
        -800
      ],
      "id": "0d4be5ec-7f9e-4db1-8de7-461d1d528604",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n        \"title\": {\n            \"type\": \"string\"\n        },\n        \"summary\": {\n            \"type\": \"string\"\n        },\n        \"inspirations\": {\n            \"type\": \"array\",\n            \"description\": \"inspirations used to create the concept for the article\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"title\": {\n                        \"type\": \"string\",\n                        \"description\": \"the title of the inspiration\"\n                    },\n                    \"link\": {\n                        \"type\": \"string\",\n                        \"description\": \"the link of the inspiration\"\n                    },\n                    \"article\": {\n                        \"type\": \"string\",\n                        \"description\": \"the content of the inspiration\"\n                    }\n                },\n                \"required\": [\n                    \"title\",\n                    \"link\",\n                    \"article\"\n                ]\n            }\n        }\n    },\n    \"required\": [\n        \"inspirations\",\n        \"title\",\n        \"summary\"\n    ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -2920,
        -520
      ],
      "id": "f558f435-81f6-41b0-8d79-b27dfa399c1b",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "content": "# I recommend you to add some kind of persistency so you won't use the same bookmarks twice",
        "height": 680,
        "width": 300,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -6400,
        -1300
      ],
      "id": "cd5688cb-73b6-4ef9-bdae-5820c55e0fe7",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "Os0leFnDnV2lb0ac",
          "mode": "list",
          "cachedResultName": "scrape link"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "link": "={{ $json.bookmark.link }}"
          },
          "matchingColumns": [
            "link"
          ],
          "schema": [
            {
              "id": "link",
              "displayName": "link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -3880,
        -800
      ],
      "id": "d8871ffe-13c9-4b19-9271-ea9afa98c1cb",
      "name": "Scrape and summarize bookmarks"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "NVNbw3MAjDEgeEm2",
          "mode": "list",
          "cachedResultName": "deep research"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "top_results": 3,
            "num_search_terms": 2,
            "context": "=<Instructions>\nI'd like to create an article. I already got inspirations from other articles, and came up with a title and a summary. Find the data below.\n\nI want to run a research on Google on the subject to collect even more data/inspiration. Help me to come up with search terms I can use.\nI need 4 search terms. Make sure to be creative, and give me different ones so I can get diverse search results.\n</Instructions>\n\n<Title>\n{{ $json.output.title }}\n</Title>\n\n<Summary>\n{{ $json.output.summary }}\n</Summary>\n\n<Inspirations>\n{{ $json.output.inspirations.map(item => `<Inspiration>\\n${item.article}\\n</Inspiration>`).join('\\n') }}\n</Inspirations>"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "top_results",
              "displayName": "top_results",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number"
            },
            {
              "id": "context",
              "displayName": "context",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "num_search_terms",
              "displayName": "num_search_terms",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -2680,
        -800
      ],
      "id": "e43d4ce0-8556-4a57-b870-06d0906f7b10",
      "name": "Run deep research"
    },
    {
      "parameters": {
        "content": "# 1. Gather bookmarks\n\n## This section fetches trending bookmarks from Pinboard\n- Gets HTML from popular bookmarks page\n- Extracts bookmark data using CSS selectors\n- Splits out individual bookmarks for processing",
        "height": 240,
        "width": 760
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -6040,
        -1100
      ],
      "id": "73e132cf-84a7-4e85-9053-bf3c37771380",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "# 2. Pick the related bookmarks\n\n## AI filters bookmarks to find AI/LLM related content\n- Uses LLM to analyze all bookmarks\n- Filters for AI and LLM related content\n- Returns top 3 most relevant for technical audience\n- Outputs structured data with title and link",
        "height": 240,
        "width": 1060,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4880,
        -1100
      ],
      "id": "e65cfe36-4876-4545-8b94-85b07d793801",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "# 3. Create topic, deep research\n\n## This section creates article concept and gathers research\n- Scrapes content from selected bookmarks\n- Analyzes content to create article topic and summary\n- Runs additional Google research for more data\n- Combines inspiration articles with research results",
        "height": 280,
        "width": 560,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3460,
        -1140
      ],
      "id": "f82cee01-3e68-4d2e-ae20-ac7c5626191d",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $('Basic LLM Chain3').item.json.output.content.length }}",
              "operation": "larger",
              "value2": 2000
            }
          ]
        }
      },
      "id": "a73f8156-8177-438d-9f3b-e607982d662d",
      "name": "IF text longer than 2000 chars",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1680,
        -400
      ]
    },
    {
      "parameters": {
        "jsCode": "let result = [];\nlet firstBlock = true;\nconst content = $input.first().json.output.content;\nconst targetLength = 1200;\n\nlet startIndex = 0;\n\nwhile (startIndex < content.length) {\n  let endIndex = startIndex + targetLength;\n  \n  // If we're not at the end of the content, find a good break point\n  if (endIndex < content.length) {\n    // First, try to break at end of sentence\n    let sentenceEnd = content.lastIndexOf('.', endIndex);\n    if (sentenceEnd === -1) sentenceEnd = content.lastIndexOf('!', endIndex);\n    if (sentenceEnd === -1) sentenceEnd = content.lastIndexOf('?', endIndex);\n    \n    // If we found a sentence end and it's not too far back (within 50 chars)\n    if (sentenceEnd > startIndex && sentenceEnd > endIndex - 50) {\n      endIndex = sentenceEnd + 1; // Include the punctuation\n    } else {\n      // If no sentence end found, break at last word boundary\n      let lastSpace = content.lastIndexOf(' ', endIndex);\n      if (lastSpace > startIndex) {\n        endIndex = lastSpace;\n      }\n      // If no space found, keep original endIndex (rare edge case)\n    }\n  }\n  \n  const textSubString = content.substring(startIndex, endIndex).trim();\n  \n  // Only add non-empty blocks\n  if (textSubString.length > 0) {\n    result.push({\n      \"textSubString\": textSubString,\n      \"firstBlock\": firstBlock\n    });\n    firstBlock = false;\n  }\n  \n  startIndex = endIndex;\n  \n  // Skip any leading whitespace for next block\n  while (startIndex < content.length && content[startIndex] === ' ') {\n    startIndex++;\n  }\n}\n\nreturn result;"
      },
      "id": "e0b52397-3d3d-4856-b23d-fbe83773ee3d",
      "name": "Splits text in small chuncks",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1780,
        -20
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.firstBlock }}",
              "value2": true
            }
          ]
        }
      },
      "id": "cdba6589-a2b5-494d-b7b1-1843740b78ee",
      "name": "IF2",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1220,
        160
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "debe5f18-1f1a-4a43-a612-15637893ebb5",
      "name": "Merge1",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        -80,
        280
      ]
    },
    {
      "parameters": {
        "pageId": {
          "__rl": true,
          "value": "=https://www.notion.so/traversaal-ai/Automated-Articles-2039a2e5c4a6805eae92c53917f69837",
          "mode": "url"
        },
        "title": "={{ $('Markdown').item.json.output.title }}",
        "blockUi": {
          "blockValues": [
            {
              "textContent": "={{ $json.textSubString }}"
            }
          ]
        },
        "options": {}
      },
      "id": "73a8ff6e-faea-4201-bafe-e78ec09388a4",
      "name": "Creates the page and adds the first part of text",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2,
      "position": [
        -540,
        -120
      ],
      "credentials": {
        "notionApi": {
          "id": "1SBn5yvUh6eP4yvJ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "block",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.url }}",
          "mode": "url"
        },
        "blockUi": {
          "blockValues": [
            {
              "textContent": "={{ $json.textSubString }}"
            },
            {}
          ]
        }
      },
      "id": "6c2d289c-949a-45a9-93c9-1cfeff49cfd1",
      "name": "Adds additional blocks",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2,
      "position": [
        100,
        280
      ],
      "credentials": {
        "notionApi": {
          "id": "1SBn5yvUh6eP4yvJ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "url",
              "stringValue": "={{ $json.url }}"
            }
          ]
        },
        "include": "none",
        "options": {}
      },
      "id": "5f62f66d-aa37-47f9-b505-08db4a361462",
      "name": "Edit Fields1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [
        -260,
        100
      ]
    },
    {
      "parameters": {
        "content": "# 4. Article Generation & Publishing\n\n## This section handles the final article creation\n- Generates detailed article using LLM with all research\n- Converts markdown to HTML for better formatting\n- Handles both short and long articles appropriately",
        "height": 300,
        "width": 480,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2160,
        -1180
      ],
      "id": "18285abf-73e6-4f5f-825d-1f9c5c274dfc",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "# 5. Publishing to Notion\n\n## Long article handling for Notion API limits\n- Splits long articles into chunks (1200 chars)\n- Finds good break points at sentence boundaries\n- Creates Notion page with first chunk\n- Adds remaining chunks as additional blocks\n- Maintains proper formatting and structure",
        "height": 320,
        "width": 480,
        "color": 5
      },
      "id": "337e3c94-7180-4316-b673-22b161450baf",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2240,
        -80
      ]
    },
    {
      "parameters": {
        "content": "# 6. Finalizing & Notifications\n\n## Final steps for article completion\n- Adds reference links from research\n- Sends email notification with article link\n- Ensures proper formatting and structure\n- Provides easy access to published content",
        "height": 240,
        "width": 480,
        "color": 6
      },
      "id": "29897662-0939-44e4-9f13-6b4195a2ce53",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        160,
        -360
      ]
    },
    {
      "parameters": {
        "maxItems": "=3"
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        -4320,
        -800
      ],
      "id": "a4293a2c-e6af-43a6-afe5-c5e87c5b0310",
      "name": "Limit"
    },
    {
      "parameters": {
        "sendTo": "taha@traversaal.ai",
        "subject": "=You have a new article:  {{ $('Creates the page and adds the first part of text').item.json.properties.title.title[0].text.content }}",
        "message": "=Link to article: {{ $('Creates the page and adds the first part of text').item.json.url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        260,
        -160
      ],
      "id": "303141fe-24c7-4fef-920c-7481925c8d3c",
      "name": "Gmail",
      "webhookId": "e5a77619-d7e1-4476-a536-11ce527767a1",
      "credentials": {
        "gmailOAuth2": {
          "id": "BnsTwPYuY86Hs0hC",
          "name": "Taha Google-Mail"
        }
      }
    },
    {
      "parameters": {
        "resource": "block",
        "blockId": {
          "__rl": true,
          "value": "={{ $('Merge1').item.json.url }}",
          "mode": "url"
        },
        "blockUi": {
          "blockValues": [
            {
              "type": "heading_2",
              "textContent": "References"
            },
            {
              "type": "numbered_list_item",
              "richText": true,
              "text": {
                "text": [
                  {
                    "text": "={{ $('Run deep research').item.json.research_results[0].link }}",
                    "isLink": true,
                    "textLink": "={{ $('Run deep research').item.json.research_results[0].link }}",
                    "annotationUi": {}
                  }
                ]
              }
            },
            {
              "type": "numbered_list_item",
              "richText": true,
              "text": {
                "text": [
                  {
                    "text": "={{ $('Run deep research').item.json.research_results[1].link }}",
                    "isLink": true,
                    "textLink": "={{ $('Run deep research').item.json.research_results[1].link }}",
                    "annotationUi": {}
                  }
                ]
              }
            },
            {
              "type": "numbered_list_item",
              "richText": true,
              "text": {
                "text": [
                  {
                    "text": "={{ $('Run deep research').item.json.research_results[2].link }}",
                    "isLink": true,
                    "textLink": "={{ $('Run deep research').item.json.research_results[2].link }}",
                    "annotationUi": {}
                  }
                ]
              }
            },
            {
              "type": "numbered_list_item",
              "richText": true,
              "text": {
                "text": [
                  {
                    "text": "={{ $('Run deep research').item.json.research_results[3].link }}",
                    "isLink": true,
                    "textLink": "={{ $('Run deep research').item.json.research_results[3].link }}",
                    "annotationUi": {}
                  }
                ]
              }
            }
          ]
        }
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        600,
        280
      ],
      "id": "575d2721-bb22-4278-9112-636d8f934eaf",
      "name": "Notion",
      "credentials": {
        "notionApi": {
          "id": "1SBn5yvUh6eP4yvJ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        320,
        280
      ],
      "id": "6806895b-d81d-4b58-b19d-a25d22b05d61",
      "name": "Limit1"
    },
    {
      "parameters": {
        "content": "# Content Scraping & Analysis\n\n## This section processes selected AI bookmarks\n- Calls external workflow to scrape bookmark content\n- Summarizes and analyzes each article\n- Prepares data for topic generation\n- Combines title, link, and content for each source",
        "height": 320,
        "width": 420,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4000,
        -1160
      ],
      "id": "db68e283-f6a6-4eb2-9810-b622f01240e6",
      "name": "Sticky Note Scraping"
    },
    {
      "parameters": {
        "content": "# Text Length Management\n\n## Handles articles that exceed Notion API limits\n- Checks if article content > 2000 characters\n- If short: publishes directly to Notion\n- If long: splits into manageable chunks\n- Ensures proper text boundaries for readability",
        "height": 320,
        "width": 420
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1480,
        -500
      ],
      "id": "6dd6b5d4-969b-4460-b693-a6a37450ec75",
      "name": "Sticky Note Length"
    },
    {
      "parameters": {
        "content": "# Smart Text Chunking\n\n## Intelligently splits long articles\n- Target chunk size: 1200 characters\n- Finds sentence boundaries for clean breaks\n- Falls back to word boundaries if needed\n- Maintains article flow and readability\n- Marks first chunk for page creation",
        "height": 280,
        "width": 420,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1460,
        160
      ],
      "id": "df85ae15-6c04-4543-950b-59fba4eecaef",
      "name": "Sticky Note Chunking"
    },
    {
      "parameters": {
        "content": "# Notion Page Creation Logic\n\n## Handles different content types\n- First chunk: Creates new Notion page with title\n- Subsequent chunks: Added as blocks to existing page\n- Merges page URL with remaining content\n- Maintains proper document structure",
        "height": 300,
        "width": 420,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -760,
        100
      ],
      "id": "0444a684-dbb8-4f87-b6fa-f2d32aad62f4",
      "name": "Sticky Note Notion Logic"
    }
  ],
  "connections": {
    "When clicking 'Test workflow'": {
      "main": [
        [
          {
            "node": "Get popular bookmarks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain3": {
      "main": [
        [
          {
            "node": "Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser3": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain3",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Markdown": {
      "main": [
        [
          {
            "node": "IF text longer than 2000 chars",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain3",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Find trending AI bookmarks",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Come up with a topic1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Extract bookmark",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Find trending AI bookmarks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "Find trending AI bookmarks",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Get popular bookmarks": {
      "main": [
        [
          {
            "node": "Extract bookmarks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract bookmarks": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract bookmark": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Come up with a topic1": {
      "main": [
        [
          {
            "node": "Run deep research",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find trending AI bookmarks": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out3": {
      "main": [
        [
          {
            "node": "Scrape and summarize bookmarks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate3": {
      "main": [
        [
          {
            "node": "Come up with a topic1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Aggregate3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Come up with a topic1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Scrape and summarize bookmarks": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Run deep research": {
      "main": [
        [
          {
            "node": "Basic LLM Chain3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF text longer than 2000 chars": {
      "main": [
        [
          {
            "node": "Splits text in small chuncks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Splits text in small chuncks": {
      "main": [
        [
          {
            "node": "IF2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF2": {
      "main": [
        [
          {
            "node": "Creates the page and adds the first part of text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Adds additional blocks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Creates the page and adds the first part of text": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Gmail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Adds additional blocks": {
      "main": [
        [
          {
            "node": "Limit1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Split Out3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit1": {
      "main": [
        [
          {
            "node": "Notion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1725aaf255f271a2cb370b9051de0a61864aaf0b262c35ad3f624929f92bfcff"
  }
}