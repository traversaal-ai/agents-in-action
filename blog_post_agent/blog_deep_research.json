{
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5c28393f-6e8b-425b-babb-22eac9ad7238",
              "name": "API_KEY",
              "value": "ares_a79c77acc353d13a751f576e5ebccef9fd49a002d8b5365a15f104ea760afe43",
              "type": "string"
            },
            {
              "id": "a848bf0c-0a5f-4acc-9412-aebd93c84380",
              "name": "top_results",
              "value": "={{ $json.top_results ?? 3 }}",
              "type": "number"
            },
            {
              "id": "c52bbef3-c0a6-4017-a403-abaaee216895",
              "name": "context",
              "value": "={{ $json.context }}",
              "type": "string"
            },
            {
              "id": "ae883a9e-7207-48ef-ad1f-9c86076e0308",
              "name": "num_search_terms",
              "value": "={{ $json.num_search_terms ?? 2 }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3540,
        -240
      ],
      "id": "c8481234-6c42-4105-9cc7-15d68c55b7ba",
      "name": "configuration"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n        \"search_terms\": {\n            \"type\": \"array\",\n            \"description\": \"the google search terms\",\n            \"items\": {\n                \"type\": \"string\"\n            }\n        }\n    },\n    \"required\": [\n        \"search_terms\"\n    ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -2980,
        80
      ],
      "id": "febd25c4-f56f-436e-9180-e4bdb242f0d7",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1480,
        280
      ],
      "id": "a310137f-3a37-4550-907f-7d8a53894054",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "1NYcjHdurohDfhOk",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "output.search_terms",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -2840,
        -240
      ],
      "id": "a6cb97f7-0839-4cb1-b178-f05c8eb8e80d",
      "name": "Split Out"
    },
    {
      "parameters": {
        "fieldToSplitOut": "=data.web_url",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -2420,
        -240
      ],
      "id": "33fb3353-dc75-4a47-98dd-a1adfb7ce58b",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "extractionValues": {
          "values": [
            {
              "key": "data",
              "cssSelector": "body",
              "returnValue": "html"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        -1320,
        -240
      ],
      "id": "6b3e3a8d-8903-4110-808f-298ae3b7550b",
      "name": "HTML"
    },
    {
      "parameters": {
        "html": "={{ $json.data }}",
        "options": {}
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        -1080,
        -240
      ],
      "id": "144eb6a0-6ea0-4235-8775-ab3afff170a9",
      "name": "Markdown"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n        \"summary\": {\n            \"type\": \"string\",\n            \"description\": \"the summary of the content\"\n        }\n    },\n    \"required\": [\n        \"summary\"\n    ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -360,
        140
      ],
      "id": "0b6954e2-6423-4a82-9d41-90e026967d1f",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n        \"relevant_to_context\": {\n            \"type\": \"boolean\",\n            \"description\": \"whether the researched content is relevant to the context\"\n        }\n    },\n    \"required\": [\n        \"relevant_to_article\"\n    ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        40,
        120
      ],
      "id": "a98370ad-db15-4f71-b762-e51d6ec76a4e",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "research_results",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        740,
        -240
      ],
      "id": "1ba17311-5f48-4ad8-8c0d-17e103451c19",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "top_results",
              "type": "number"
            },
            {
              "name": "context"
            },
            {
              "name": "num_search_terms",
              "type": "number"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -3860,
        -240
      ],
      "id": "76d31859-f39d-42f1-857f-ab5f4f4e0f0c",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "content": "# Configure\n\n- Custom API key",
        "height": 400,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3580,
        -420
      ],
      "id": "4a8dff83-341e-41b8-b282-88980ec265d6",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "# Custom Search API documentation\n\n## Signup on https://api.traversaal.ai/ to access api",
        "height": 320,
        "width": 1620
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2540,
        -980
      ],
      "id": "55fc4a34-bfc9-4b22-9a89-bb226446e0cb",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<Context>\n{{ $json.context }}\n</Context>\n\n<Instructions>\nI want to run a research on Google on the context above. \nHelp me to come up with search terms I can use.\nI need exactly {{ $json.num_search_terms }} search term(s) - no more no less. \nMake sure to be creative, and give me different ones so I can get diverse search results.\n</Instructions>",
        "hasOutputParser": true
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        -3220,
        -240
      ],
      "id": "81c0ac26-c250-4dd9-9202-9e3572c5efc1",
      "name": "create search terms"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api-ares.traversaal.ai/live/predict",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "x-api-key",
              "value": "={{ $('configuration').item.json.API_KEY }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ [$json['output.search_terms']] }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2640,
        -240
      ],
      "id": "8a6af563-1dcf-4a66-9ab0-3457fde5c008",
      "name": "search on Custom API",
      "retryOnFail": true
    },
    {
      "parameters": {
        "url": "={{ $json['data.web_url'] }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1900,
        -240
      ],
      "id": "8e3fdaf8-b742-4449-94f3-36de299f3dc9",
      "name": "get the content of the link",
      "retryOnFail": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "99cf6ac1-d77b-491c-86dc-44555032f5b0",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notExists",
                "singleValue": true
              }
            },
            {
              "id": "e6dd1301-acb8-4dc4-83d0-4d5b1a7f2036",
              "leftValue": "={{ $json.data }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -1540,
        -240
      ],
      "id": "dd1113f8-31b2-425b-9610-7c34f2cda82d",
      "name": "filter out the errors"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e70a34f7-b723-47fe-a62f-1a318c483959",
              "leftValue": "={{ $json.data }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -860,
        -240
      ],
      "id": "88e3f807-ea3e-4b65-9d1b-b184d60a19d0",
      "name": "filter empty results"
    },
    {
      "parameters": {
        "jsCode": "for (const item of $input.all()) {\n  item.json.data = item.json.data.replace(/!\\[[^\\]]+\\]\\([^\\)]+\\)/g, \"\") // remove images\n  item.json.data = item.json.data.replace(/\\[.*?\\]\\(.*?\\)/g, \"\") // remove links\n  item.json.data = item.json.data.replace(/\\n{2,}/g, \"\") // remove extra new line characters\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -660,
        -240
      ],
      "id": "79d008d2-fbbc-44e1-9d40-fb5ece47a8d1",
      "name": "cleanup the markdown"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=I've collected research content using Google search.\n\nRead the research content, and analyze whether it is relevant to the context below.\nMake sure it's also useful, and contains relevant information for my context.\n\n<Context>\n{{ $('configuration').item.json.context }}\n</Context>\n\n<ResearchContentSummary>\n{{ $json.output.summary }}\n</ResearchContentSummary>",
        "hasOutputParser": true
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        -60,
        -240
      ],
      "id": "1e92ed3e-b658-4141-adc3-4a3e47513795",
      "name": "is it relevant?",
      "retryOnFail": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Please summarize the following content for me. Make sure to capture all the information in a concise format. Don't miss anything important.\nIgnore generic website elements like cookie policies, etc.\n\n<Content>\n{{ $json.data }}\n</Content>",
        "hasOutputParser": true
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        -440,
        -240
      ],
      "id": "f01acb37-7873-4d55-81dc-828d415af06f",
      "name": "summarize",
      "retryOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a72e5161-9b19-45fb-bb4f-5ae28d3da266",
              "leftValue": "={{ $json.output.relevant_to_context }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        280,
        -240
      ],
      "id": "03487b10-05b8-46eb-b628-f1a5d8d922af",
      "name": "filter irrelevant"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "53e16d12-8a90-4cf8-85e2-6aa2ef2ae3af",
              "name": "summary",
              "value": "={{ $('summarize').item.json.output.summary }}",
              "type": "string"
            },
            {
              "id": "1ca9f5a5-0e9a-47e6-9fef-079367dc4769",
              "name": "title",
              "value": "Search Result",
              "type": "string"
            },
            {
              "id": "11c33d6b-d23c-4bc6-9003-b8ca022b3ada",
              "name": "link",
              "value": "={{ $('Split Out1').item.json['data.web_url'] }}",
              "type": "string"
            },
            {
              "id": "eea8547b-2e21-4b71-a9dc-74639d658485",
              "name": "snippet",
              "value": "Custom API search result",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        520,
        -240
      ],
      "id": "127044db-0ff9-47aa-bc65-e1f253a50bac",
      "name": "set fields to return"
    },
    {
      "parameters": {
        "content": "# You can replace OpenAI with Ollama!",
        "height": 320,
        "width": 420
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1840,
        120
      ],
      "id": "cdf4d931-2468-4209-b879-ab4501e6c947",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "maxItems": 10
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        -2200,
        -240
      ],
      "id": "71e78ff5-de83-4334-bab2-914f9b876547",
      "name": "Limit"
    },
    {
      "parameters": {
        "content": "# Search Term Generation\n\nThis section uses AI to generate diverse search terms based on the provided context. The AI analyzes the context and creates optimized search queries for better research coverage.",
        "width": 380,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3240,
        -460
      ],
      "id": "f9866a5c-503d-45de-8bbc-1adbb73c7bf7",
      "name": "Search Terms Note"
    },
    {
      "parameters": {
        "content": "# Web Search & Data Collection\n\nThis pipeline executes searches using the custom API, extracts URLs from results, and fetches the actual web content. It includes error handling and rate limiting.",
        "width": 600,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2640,
        -520
      ],
      "id": "99069861-347c-4ec1-9599-df26ec961226",
      "name": "Web Search Note"
    },
    {
      "parameters": {
        "content": "# Content Processing Pipeline\n\nHTML → Markdown → Cleanup → Summarization\n\nThis section converts web content to markdown, removes unnecessary elements (images, links, extra whitespace), and creates AI-powered summaries.",
        "height": 180,
        "width": 500,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1360,
        -520
      ],
      "id": "538e555e-094d-4400-882c-10b6f3c6de9a",
      "name": "Content Processing Note"
    },
    {
      "parameters": {
        "content": "# AI Quality Control\n\nThis section uses AI to:\n1. Evaluate content relevance to the original context\n2. Filter out irrelevant results\n3. Ensure only high-quality, contextually appropriate content passes through",
        "height": 200,
        "width": 400,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -200,
        -520
      ],
      "id": "234a5843-0289-49c3-9793-c45e49a50809",
      "name": "Quality Control Note"
    },
    {
      "parameters": {
        "content": "# Final Output Assembly\n\nStructures the final research results with:\n- Summary of each source\n- Original link\n- Title and snippet\n- All results aggregated into a single response",
        "height": 300,
        "width": 320,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        440,
        -600
      ],
      "id": "4ab1476f-5469-4a7c-a060-7388917662a5",
      "name": "Output Assembly Note"
    },
    {
      "parameters": {
        "content": "# Workflow Input Parameters\n\n- **context**: The research topic/question\n- **num_search_terms**: Number of search queries to generate\n- **top_results**: Maximum results to process per search\n\nThis workflow can be called from other workflows or triggered manually.",
        "height": 300,
        "width": 440
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4120,
        -580
      ],
      "id": "b791fd93-3234-4e4a-8b1b-d0485a0b1d0a",
      "name": "Workflow Input Note"
    }
  ],
  "connections": {
    "configuration": {
      "main": [
        [
          {
            "node": "create search terms",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "create search terms",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "create search terms",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "summarize",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "is it relevant?",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "search on Custom API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML": {
      "main": [
        [
          {
            "node": "Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Markdown": {
      "main": [
        [
          {
            "node": "filter empty results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "summarize",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "is it relevant?",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "configuration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create search terms": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "search on Custom API": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get the content of the link": {
      "main": [
        [
          {
            "node": "filter out the errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filter out the errors": {
      "main": [
        [
          {
            "node": "HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filter empty results": {
      "main": [
        [
          {
            "node": "cleanup the markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cleanup the markdown": {
      "main": [
        [
          {
            "node": "summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "is it relevant?": {
      "main": [
        [
          {
            "node": "filter irrelevant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "summarize": {
      "main": [
        [
          {
            "node": "is it relevant?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filter irrelevant": {
      "main": [
        [
          {
            "node": "set fields to return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set fields to return": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "get the content of the link",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1725aaf255f271a2cb370b9051de0a61864aaf0b262c35ad3f624929f92bfcff"
  }
}