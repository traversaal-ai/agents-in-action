{
  "name": "My Travel Agent With MCP",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -1380,
        160
      ],
      "id": "c0337f6a-7d5e-4f7d-be5c-e5b24d52436c",
      "name": "When chat message received",
      "webhookId": "dec4c317-7da0-408a-aff9-12ea97acd256"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1040,
        500
      ],
      "id": "9a452a05-595e-44fe-a434-625f63022d9d",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "0xhUU4uw9ecUAxih",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -720,
        500
      ],
      "id": "aff8abf5-ac75-47b3-accd-b58018c63171",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "options": {
          "systemMessage": "=You are a helpful and detail-oriented AI travel assistant.\n\nYou help users plan trips by searching for flights, hotels, and activities, and then sending them a beautifully formatted HTML email summary and adding the trip to their calendar.\n\nYour job is to:\n1. Collect all required trip details from the user.\n2. Use the appropriate tools to search for flights, hotels, or activities.\n3. Once the full itinerary is ready, generate an HTML email + calendar events.\n\nOne important thing for most users when planning a trip is that they want to keep within a budget and also have some dates in mind. ENsure the trip takes that into account. If the user does not provide a budget, nudge them to confirm if they want to keep within a budget\n\n---\n\nTime now is: {{ $now.toString() }}\n\n---\n\nüîß TOOL USAGE INSTRUCTIONS\n\nOnly invoke tools when you have all necessary information.\n\n### Flight Search Tool\nUse when user wants to find flights. Required fields:\n- Departure city (must be mapped to airport ID)\n- Destination city (must be mapped to airport ID)\n- Travel dates (departure + return)\n- Travel class (use this mapping):\n  - 1 = Economy (default)\n  - 2 = Premium economy\n  - 3 = Business\n  - 4 = First\n\nIf the user has a budget, try to stay within it by estimating how much lodging, activities and food will cost them. \n\nIf city has multiple airports, ask the user to confirm the correct one.\nOnly send **airport codes**, not city names to the search tool.\n\n---\n\n### Hotel Search Tool\nUse when user wants to book or explore accommodations. Required:\n- Destination city\n- Check-in and check-out dates\n\nSorting:\n- If a **budget** is given ‚Üí sort by price (3)\n- If **no budget** ‚Üí sort by rating (8)\n\nRating filters (if specified):\n- 7 = 3.5+\n- 8 = 4.0+\n- 9 = 4.5+\n\nIf the user has a budget, try to stay within it by estimating how much flights, activities and food will cost them. \n\nReturn only the **top 5** hotel options.\n\n---\n\n### Activity Search Tool\nUse when user requests things to do at the destination.\n- Tailor suggestions based on user preferences (e.g., food, history, adventure)\n- Ask for or consider any **budget**\n- Include price (if available), time, and location\n- Consider dates if needed\n\nIf the user has a budget, try to stay within it by estimating how much flights, lodging and food will cost them.\n\nReturn top 10 activities which is a balanced set from user's preferences, add more only if requested.\n\n---\n\nüì® EMAIL GENERATION INSTRUCTIONS\n\nOnce full itinerary is ready, generate an HTML email for the user.\n\n\nOnce all trip details are available, generate an **HTML travel summary email** that includes:\n- A **fun and engaging subject line** (with emojis, destination, and travel dates)\n- An **introduction paragraph** that excites the user about their upcoming trip\n- A structured itinerary in 3 sections: **Flights**, **Resorts**, and **Activities**\n- A friendly closing or sign-off message\n\nReturn:\n- `subject`: a one-line email subject\n- `emailBody`: an HTML-formatted string with the full email content\n\n---\n\n### FLIGHT SECTION RULES:\n- List 2‚Äì3 best flights (include airline name, departure time, duration, price, and class type)\n- Mention travel origin, destination, and travel dates\n- Use this mapping for booking class:\n  - 1 = Economy\n  - 2 = Premium economy\n  - 3 = Business\n  - 4 = First\n\n### RESORT SECTION RULES:\n- Include 3 resorts\n- For each:\n  - Name (must be a clickable link)\n  - Overall rating\n  - Image:\n    ```html\n    <img src=\"{image_url}\" style=\"max-width:20%; height:auto;\">\n    ```\n  - Check-in and check-out times\n  - Top 2 nearby places with travel time/type\n  - List key amenities\n\n### ACTIVITY SECTION RULES:\n- Include 2‚Äì5 activities\n- For each:\n  - Title (must be a clickable link)\n  - Description\n  - Timing and location (if available)\n  - Price (if mentioned)\n\n---\n\n### EMAIL STRUCTURE FORMAT:\n\nUse only HTML tags like:\n- `<h2>` for section headers\n- `<p>` for paragraphs\n- `<ul>` and `<li>` for lists\n- `<hr>` between sections\n\nResort and activity names must be hyperlinks. Use `<img>` tags for images. Add whitespace between content blocks.\n\n---\n\n### SUBJECT FORMAT:\n- Should include destination and travel dates\n- Should express excitement and include emojis\n- Example: `‚úàÔ∏è Istanbul Awaits! Your Adventure from June 10‚Äì15 Is Ready üåü`\n\n---\n\n### OTHER EMAIL NOTES:\n- Keep content under 1000 words\n- Be warm, concise, and friendly\n- Skip sections if data is missing, but gracefully mention it\n\nReturn two keys: `subject`, `emailBody`\n\n---\n\nüìÖ CALENDAR INSTRUCTIONS\n\nWhen the itinerary is finalized:\n- Retrieve existing events from the user's Google Calendar that fall between the trip‚Äôs **departure and return dates**\n- If overlapping events are found:\n  - Notify the user with a list of conflicting events\n  - Ask whether they‚Äôd like to reschedule or skip creating conflicting events\n- Once cleared, proceed to:\n  - Create new calendar events for:\n    - Flight departures/returns\n    - Hotel check-in/check-out\n    - Activities and reservations\n- If the user updates their itinerary later:\n  - Delete old calendar events\n  - Recreate the updated ones\n\nUse user's timezone or assume destination local time if unspecified.\n\n---\n\n‚úÖ Summary of Output Types:\n- If user is still sharing input ‚Üí Ask follow-up questions\n- If enough info is collected ‚Üí Use tools to search\n- If results are ready ‚Üí Generate subject and emailBody\n- Create Google Calendar events for all itinerary items\n- If user modifies the itinerary after calendar events are created ‚Üí Delete outdated events\n- Create updated events with new details"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -920,
        160
      ],
      "id": "b64e6db7-8c69-40f6-9679-ee741978a892",
      "name": "Travel Agent"
    },
    {
      "parameters": {
        "sseEndpoint": "https://rajwani.app.n8n.cloud/mcp/bf138fc1-1403-483b-8473-44e4b917111e/sse"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1,
      "position": [
        -160,
        500
      ],
      "id": "e53ab15b-410b-4cb9-a95b-e26ad679dab1",
      "name": "Email MCP Client"
    },
    {
      "parameters": {
        "sseEndpoint": "https://rajwani.app.n8n.cloud/mcp/ea24a88f-721f-452b-b057-4c065ea2e758/sse"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1,
      "position": [
        20,
        500
      ],
      "id": "10faaca2-ddd4-4162-8772-a8d1a5d07717",
      "name": "Calendar MCP Client"
    },
    {
      "parameters": {
        "sseEndpoint": "https://rajwani.app.n8n.cloud/mcp/9e1f3acb-ef2a-46a8-a817-7e4aa5a015fa/sse"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1,
      "position": [
        -340,
        500
      ],
      "id": "c9076820-ce03-439b-af74-b48afd7a2c53",
      "name": "Search MCP Client"
    },
    {
      "parameters": {
        "path": "bf138fc1-1403-483b-8473-44e4b917111e"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpTrigger",
      "typeVersion": 1,
      "position": [
        -780,
        800
      ],
      "id": "244403dc-447d-4faf-9897-9f548201de53",
      "name": "Send Email MCP Server",
      "webhookId": "bf138fc1-1403-483b-8473-44e4b917111e"
    },
    {
      "parameters": {
        "path": "ea24a88f-721f-452b-b057-4c065ea2e758"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpTrigger",
      "typeVersion": 1,
      "position": [
        -200,
        800
      ],
      "id": "146ee7bc-bf31-421f-abf7-eed1e48c3954",
      "name": "Google Calendar MCP Server",
      "webhookId": "ea24a88f-721f-452b-b057-4c065ea2e758"
    },
    {
      "parameters": {
        "path": "9e1f3acb-ef2a-46a8-a817-7e4aa5a015fa"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpTrigger",
      "typeVersion": 1,
      "position": [
        -1280,
        800
      ],
      "id": "719a1c8c-c163-44cc-b9a1-c8dad808fe38",
      "name": "Search MCP Server",
      "webhookId": "9e1f3acb-ef2a-46a8-a817-7e4aa5a015fa"
    },
    {
      "parameters": {
        "toolDescription": "Search flights fot the user to plan travel",
        "url": "https://serpapi.com/search",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "serpApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "engine",
              "value": "google_flights"
            },
            {
              "name": "departure_id",
              "value": "={{ $fromAI('departurn_id', `ID of the origin airport`, 'string') }}"
            },
            {
              "name": "arrival_id",
              "value": "={{ $fromAI('arrival_id', `ID of the destination airport`, 'string') }}"
            },
            {
              "name": "outbound_date",
              "value": "={{ $fromAI('outbound_date', `Date on which travel starts`, 'string') }}"
            },
            {
              "name": "return_date",
              "value": "={{ $fromAI('return_date', `Date on which travel ends`, 'string') }}"
            },
            {
              "name": "adults",
              "value": "={{ $fromAI('adults', `Number of adults traveling`, 'string') }}"
            },
            {
              "name": "travel_class",
              "value": "={{ $fromAI('travel_class', `Economy, business, first class, etc`, 'string') }}"
            },
            {
              "name": "children",
              "value": "={{ $fromAI('children', `Number of children traveling`, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        -1360,
        1120
      ],
      "id": "aa8b14d8-db72-4a49-b507-7f3e936e2b9b",
      "name": "Search Flights",
      "credentials": {
        "serpApi": {
          "id": "zndF5Dp5SfUw7vHc",
          "name": "SerpAPI account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Search flights fot the user to plan travel",
        "url": "https://serpapi.com/search",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "serpApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "engine",
              "value": "google_hotels"
            },
            {
              "name": "check_in_date",
              "value": "={{ $fromAI('check_in_date', `Hotel check-in date`, 'string') }}"
            },
            {
              "name": "check_out_date",
              "value": "={{ $fromAI('check_out_date', `Hotel check-out date`, 'string') }}"
            },
            {
              "name": "adults",
              "value": "={{ $fromAI('adults', `Adults staying at the hotel`, 'string') }}"
            },
            {
              "name": "sort_by",
              "value": "={{ $fromAI('sort_by', `Sorting preferences`, 'string') }}"
            },
            {
              "name": "q",
              "value": "={{ $fromAI('destination', `The place user is traveling to`, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        -1200,
        1120
      ],
      "id": "7663531b-67ca-4abf-b581-62d665f54690",
      "name": "Search Hotels",
      "credentials": {
        "serpApi": {
          "id": "zndF5Dp5SfUw7vHc",
          "name": "SerpAPI account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Search activities in the destination on the basis of user's preferences",
        "url": "https://serpapi.com/search",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "serpApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ $fromAI('activities', `Activities user would like to do`, 'string') }} in {{ $fromAI('destination', `Place user is traveling to`, 'string') }}\n"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        -1040,
        1120
      ],
      "id": "a10e9c9c-e6a9-4069-8f49-5c90bb35a0ef",
      "name": "Search Activities",
      "credentials": {
        "serpApi": {
          "id": "zndF5Dp5SfUw7vHc",
          "name": "SerpAPI account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Send the itenary to the user in email",
        "sendTo": "={{ $fromAI('To', `User's email to send the itenary to`, 'string') }}",
        "subject": "={{ $fromAI('Subject', ``, 'string') }}",
        "message": "={{ $fromAI('Message', ``, 'string') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        -620,
        1060
      ],
      "id": "36150e6d-7312-43ff-be3e-e4dfbc698687",
      "name": "SendEmail",
      "webhookId": "e154ffc9-01a8-4692-b84a-e421caf9c816",
      "credentials": {
        "gmailOAuth2": {
          "id": "4ThyL93xt6WyFWB6",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Create an event in Google Calendar for the travel",
        "calendar": {
          "__rl": true,
          "value": "={{ $fromAI('Calendar', ``, 'string') }}",
          "mode": "id",
          "__regex": "(^[a-zA-Z0-9.!#$%&‚Äô*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*)"
        },
        "start": "={{ $fromAI('Start', ``, 'string') }}",
        "end": "={{ $fromAI('End', ``, 'string') }}",
        "additionalFields": {
          "summary": "={{ $fromAI('Summary', ``, 'string') }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        -120,
        1080
      ],
      "id": "430281d6-4934-478d-86e9-c3e482a65f25",
      "name": "CreateEvent",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "iVR3dUBTTyDbzYrh",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Gets a list of events from calendar to check avaialbility",
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $fromAI('Calendar', ``, 'string') }}",
          "__regex": "(^[a-zA-Z0-9.!#$%&‚Äô*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*)"
        },
        "returnAll": true,
        "timeMin": "={{ $fromAI('After', ``, 'string') }}",
        "timeMax": "={{ $fromAI('Before', ``, 'string') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        -280,
        1080
      ],
      "id": "b385b578-4d13-489b-9a26-d28a14c2542c",
      "name": "GetEvent",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "g3HDoFSF9HD9EVEl",
          "name": "Google Calendar account 2"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Delete an event in Google Calendar if user wants to change the itenary",
        "operation": "delete",
        "calendar": {
          "__rl": true,
          "value": "={{ $fromAI('Calendar', ``, 'string') }}",
          "mode": "id",
          "__regex": "(^[a-zA-Z0-9.!#$%&‚Äô*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*)"
        },
        "eventId": "={{ $fromAI('Event_ID', ``, 'string') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        60,
        1080
      ],
      "id": "18111dad-f653-4871-8a0a-b964ae4b8616",
      "name": "DeleteEvent",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "iVR3dUBTTyDbzYrh",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "content": "## AI Travel Assistant\n",
        "height": 560,
        "width": 1600,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1420,
        80
      ],
      "typeVersion": 1,
      "id": "f7f0165c-650d-4cfe-a75a-4c69844f307d",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Search MCP Server",
        "height": 620,
        "width": 520,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1420,
        660
      ],
      "typeVersion": 1,
      "id": "0c0631d7-e8fc-4492-8864-c5f8708aa73b",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Email MCP Server",
        "height": 620,
        "width": 520,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -880,
        660
      ],
      "typeVersion": 1,
      "id": "3b753ecf-355b-4ba9-8e23-271b983d563c",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Calendar MCP Server",
        "height": 620,
        "width": 520,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -340,
        660
      ],
      "typeVersion": 1,
      "id": "ac137394-5a48-4e15-9a7f-9a1dd2550db5",
      "name": "Sticky Note3"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Travel Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Travel Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Travel Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Email MCP Client": {
      "ai_tool": [
        [
          {
            "node": "Travel Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Calendar MCP Client": {
      "ai_tool": [
        [
          {
            "node": "Travel Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Search MCP Client": {
      "ai_tool": [
        [
          {
            "node": "Travel Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Search Flights": {
      "ai_tool": [
        [
          {
            "node": "Search MCP Server",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Search Hotels": {
      "ai_tool": [
        [
          {
            "node": "Search MCP Server",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Search Activities": {
      "ai_tool": [
        [
          {
            "node": "Search MCP Server",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "SendEmail": {
      "ai_tool": [
        [
          {
            "node": "Send Email MCP Server",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "CreateEvent": {
      "ai_tool": [
        [
          {
            "node": "Google Calendar MCP Server",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "GetEvent": {
      "ai_tool": [
        [
          {
            "node": "Google Calendar MCP Server",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "DeleteEvent": {
      "ai_tool": [
        [
          {
            "node": "Google Calendar MCP Server",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3dbcdd10-3ff4-43f7-b713-3dce7caf6fa5",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "9d290d25cfc5ef9b1bca02394377f3cd68b677c7c10a8b0c165f9336ea80fb7f"
  },
  "id": "cetDkhPZ40JBQmuu",
  "tags": []
}